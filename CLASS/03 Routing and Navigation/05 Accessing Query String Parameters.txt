Let us extract the query string params from the URL "/products?sortOrder=name"


import React from "react";
interface IProps {
  params: { slug: string[] };
  searchParams: { sortOrder: string };
}
const ProductDetails = ({
  params: { slug },
  searchParams: { sortOrder },
}: IProps) => {
  return (
    <>
      <div>{`Product routes ==> ${slug}`}</div>
      <p>{`SortOrder ==> ${sortOrder}`}</p>
    </>
  );
};

export default ProductDetails;


NOTE: - Query string parameters can only be accessed inside a publicly available 'page.tsx'.
So if you need to use a query string inside a component that is not a page, you need to access the query string from
the parent and then pass it to the non-page component....

ASSIGNMENT : -
Sort the Users Table using either name or email
1) Use 'fast-sort' library
2) On click of a column, add the required query string to the current url (Normally U will declare a state and update it
on click of the column with the value but in NextJs, WHEN WE NEED A STATE, WE USE QUERY STRING)
3) Access the value of the query string already added from the parent and pass it to the children then use the value to
perform the sorting.


//UsersPage
import React from "react";
import UserTable from "@/app/users/UserTable";

interface IProps {
  searchParams: { sortOrder: string; direction: "asc" | "desc" };
}
const UsersPage = async ({ searchParams }: IProps) => {
  return (
    <>
      <h1 className="underline">Users</h1>
      <br />
      <p>{JSON.stringify(searchParams)}</p>
      <UserTable
        sortOrder={searchParams.sortOrder}
        direction={searchParams.direction}
      />
    </>
  );
};

export default UsersPage;


//UserTable.tsx
import Link from "next/link";
import { sort } from "fast-sort";

interface User {
  name: string;
  id: number;
  email: string;
}

interface IProps {
  sortOrder: string;
  direction: "asc" | "desc";
}

const UserTable = async ({ sortOrder, direction }: IProps) => {
  //Fetching data in server components : - We fetch directly, no useState, no useEffect, no 'handleGetUsers' function
  const res = await fetch("https://jsonplaceholder.typicode.com/users", {
    cache: "no-cache",
  });
  const users: User[] = await res.json();
  const sortedUsers =
    direction === "asc"
      ? sort(users).asc(sortOrder === "name" ? "name" : "email")
      : sort(users).desc(sortOrder === "name" ? "name" : "email");

  return (
    <div className="overflow-x-auto">
      <p>{JSON.stringify(sortOrder)}</p>
      <p>{JSON.stringify(direction)}</p>
      <table className="table">
        <thead>
          <tr>
            <th>
              <Link href="/users?sortOrder=name&direction=asc" className="px-2">
                Name ASC
              </Link>
              <Link href="/users?sortOrder=name&direction=desc">DESC</Link>
            </th>
            <th>
              <Link
                href="/users?sortOrder=email&direction=asc"
                className="px-2"
              >
                Email ASC
              </Link>
              <Link href="/users?sortOrder=email&direction=desc">DESC</Link>
            </th>
          </tr>
        </thead>
        <tbody>
          {sortedUsers.map((user) => (
            <tr key={user.id}>
              <th>{user.name}</th>
              <th>{user.email}</th>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default UserTable;

