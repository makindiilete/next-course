Lazy Loading is a popular concept but what does it really mean? We lazy load components (Heavy components really), which
means we do not add them to the build bundle instead we fetch them when they are needed base on a user action in the UI.

Scroll to load more might also be another form of lazy loading so in summary, we load them, brings them to the UI only
when they are needed.

HOW TO INSPECT/CONFIRM LAZY LOADED COMPONENTS
We can confirm if components are lazy loaded or not by searching (cmd + f) some innertext of the component inside the
build bundle in the network tab when the js files, css are fetched or if the bundle is locally built


INSPECTING LAZY LOADED COMPONENT
-   Create a component named 'HeavyComponent.tsx'
-   Add a text 'My Heavy Component' ==> We will search for this text in the build bundle, if we find it then it is not
lazy loaded, if it is not there, and we can find it later after adding lazy loading functionality then it means it is
being lazy loaded.
NOTE : - The parent component must be a client component to be able to inspect the JS bundle
NOTE : - Show a component dynamically inside jsx does not lazy load component. Even though we are not showing the
component until user interaction happens, as long as we have imported the component in the import statements, it will
be added to the bundle file.
RESULTS : - Check 06 01 to 06 03 images


LAZY LOADING COMPONENT
To lazy load, we remove the normal way of importing components and then we use the dynamic function in next js to import
the component we want to lazy load.


"use client";
import Image from "next/image";
import Link from "next/link";

// import HeavyComponent from "@/app/components/LazyLoading/HeavyComponent";

import dynamic from "next/dynamic";

const HeavyComponent = dynamic(
  () => import("@/app/components/LazyLoading/HeavyComponent")
);

export default function Home() {
  return (
    <div>
      <div className="hero min-h-screen">
        <div className="hero-content flex-col lg:flex-row">
          <Image
            src="https://eu.louisvuitton.com/images/is/image/lv/1/PP_VP_L/louis-vuitton-lv-trainer-sneaker-shoes--BR9U1PPC01_PM1_Cropped%20worn%20view.png"
            alt="Advancly"
            width={300}
            height={170}
            sizes="100vw"
            objectFit="contain"
            quality={100}
            className="max-w-sm rounded-lg shadow-2xl"
          />
          <div>
            {/*  using our custom font-poppins*/}
            <h1 className="text-5xl font-bold font-poppins">
              NextJS x Louis Vuitton!
            </h1>
            <p className="py-6 text-secondary-content">
              Enhancing the Luxury Fashion Experience with Modern Web
              Technologies: A Deep Dive into Next.js and Louis Vuitton
              Collaboration
            </p>
            <Link href="/users" className="btn btn-primary">
              Get Started
            </Link>
          </div>
        </div>
      </div>
      <HeavyComponent />
    </div>
  );
}

//Overriding metadata in the route
// The title here will show in the home tab of our browser instead of using the default specified in the layout route
// on all pages
/*
export const metadata: Metadata = {
  title: "The Home Route",
  description: "The Home route of crash course on nextjs with tailwind css",
};
*/

NOTE : - Lazy loading small component is not advisable, Heavy components should be the one bin lazy loaded bcos lazy
loading small components does not offer any performance improvements.
